default:
  tags:
    - rzias

stages:
  - test-cim-converter
  - build
  - publish
  - deploy
  - release
  - publish_release

variables:
  FF_USE_FASTZIP: "true"
  CACHE_COMPRESSION_LEVEL: "fastest"
  TRANSFER_METER_FREQUENCY: 5s
  GIT_SUBMODULE_STRATEGY: none
  GIT_DEPTH: 2
  TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
  MAVEN_OPTS: >-
    -Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository

  GRADLE_IMAGE: gradle:7.5.1-jdk17
  RUNNER_TAGS:
    value: "rzias"
    options:
      - "rzias"
      - "common-yandex"
    description: "runner name"

test-cim-converter:
  stage: test-cim-converter
  image: ${GRADLE_IMAGE}
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle_home

  script:
    - gradle :cim-converter:test
  cache:
    - key: gradle-cache
      paths:
        - .gradle_home

  artifacts:
    when: always
    reports:
      junit: $CI_PROJECT_DIR/**/build/test-results/test/**/TEST-*.xml

  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: always
  tags:
    - $RUNNER_TAGS

build:
  stage: build
  image: ${GRADLE_IMAGE}
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle_home

  script:
    - gradle :cim-converter:ktlintCheck
    - gradle :scheme-manager:ktlintCheck
    - gradle :scheme-manager:bootJar --stacktrace --info --build-cache -Dorg.gradle.vfs.verbose=true
  cache:
    - key: gradle-cache
      paths:
        - .gradle_home/wrapper
        - .gradle_home/caches
    - key: build_jars-$CI_COMMIT_REF_SLUG
      paths:
        - scheme-manager/build/libs/*.jar
      policy: push
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: always
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: always
  tags:
    - $RUNNER_TAGS

publish:
  image: docker:stable
  stage: publish

  cache:
    key: build_jars-$CI_COMMIT_REF_SLUG
    paths:
      - build/libs/
    policy: pull

  services:
    - name: docker:dind
      command: ["--registry-mirror=https://mirror.gcr.io"]
      alias: thedockerhost
  variables:
    DOCKER_HOST: tcp://thedockerhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY

  script:
    - cd scheme-manager
    - docker build -t $TAG_COMMIT -t $TAG_LATEST .
    - docker push $TAG_COMMIT
    - docker push $TAG_LATEST

  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: on_success
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: on_success
  tags:
    - $RUNNER_TAGS

  allow_failure: false

deploy:
  image: alpine
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apk --update add openssh-client )'
    - apk update && apk add openssh-client rsync
    - eval "$(ssh-agent -s)"
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

  stage: deploy

  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_BRANCH == 'dev'
      when: on_success

  tags:
    - common-yandex

  allow_failure: false

  script:
    - echo "Start deploying procces.."
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p /home/deployer/dev_scheme_manager_back"
    - rsync -atv --delete --progress ./scheme-manager/docker-compose.yaml $SERVER_USER@$SERVER_IP:/home/deployer/dev_scheme_manager_back/
    - rsync -atv --delete --progress ./scheme-manager/.env $SERVER_USER@$SERVER_IP:/home/deployer/dev_scheme_manager_back/
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f dev_scheme_manager_back || true"
    - ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 $SERVER_USER@$SERVER_IP "export TAG_COMMIT="$TAG_COMMIT"; cd /home/deployer/dev_scheme_manager_back; docker-compose pull"
    - ssh -o StrictHostKeyChecking=no -o ServerAliveInterval=30 $SERVER_USER@$SERVER_IP "export TAG_COMMIT="$TAG_COMMIT"; cd /home/deployer/dev_scheme_manager_back; docker-compose up -d"

release:
  stage: release
  script:
    - apk update && apk add curl
    - echo "create release of version $CI_COMMIT_TAG"
    - curl --location --output /usr/local/bin/release-cli "https://release-cli-downloads.s3.amazonaws.com/latest/release-cli-linux-amd64"
    - chmod +x /usr/local/bin/release-cli
  tags:
    - common-yandex
  release:
    name: 'Release $CI_COMMIT_TAG '
    tag_name: '$CI_COMMIT_TAG'
    description: 'release $CI_COMMIT_TAG'
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success

publish_release_tag:
  stage: publish_release
  image: docker:stable
  services:
    - name: docker:dind
      command: ["--registry-mirror=https://mirror.gcr.io"]
      alias: thedockerhost
  variables:
    DOCKER_HOST: tcp://thedockerhost:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - echo "Tagging image $CI_COMMIT_SHORT_SHA as $CI_COMMIT_TAG..."
    - docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG
      when: on_success
    - when: never

  tags:
    - common-yandex
